import tkinter as tk
from tkinter import ttk, scrolledtext
import requests
from urllib.parse import urlparse
import threading
from datetime import datetime
import customtkinter as ctk


class SecurityAnalyzerGUI:
    def __init__(self):
        self.window = ctk.CTk()
        self.window.title("Анализатор Безопасности Сайтов")
        self.window.geometry("800x600")

        # Установка темы
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("blue")

        self.create_widgets()

    def create_widgets(self):
        # Верхняя панель
        header_frame = ctk.CTkFrame(self.window)
        header_frame.pack(fill="x", padx=20, pady=10)

        title_label = ctk.CTkLabel(
            header_frame,
            text="Анализатор Безопасности Сайтов",
            font=("Helvetica", 24)
        )
        title_label.pack(pady=10)

        # Панель ввода URL
        input_frame = ctk.CTkFrame(self.window)
        input_frame.pack(fill="x", padx=20, pady=10)

        url_label = ctk.CTkLabel(
            input_frame,
            text="URL сайта:",
            font=("Helvetica", 14)
        )
        url_label.pack(side="left", padx=5)

        self.url_entry = ctk.CTkEntry(
            input_frame,
            width=400,
            placeholder_text="Введите URL для анализа..."
        )
        self.url_entry.pack(side="left", padx=5, fill="x", expand=True)

        self.analyze_button = ctk.CTkButton(
            input_frame,
            text="Анализировать",
            command=self.start_analysis
        )
        self.analyze_button.pack(side="left", padx=5)

        # Прогресс бар
        self.progress_bar = ctk.CTkProgressBar(self.window)
        self.progress_bar.pack(fill="x", padx=20, pady=10)
        self.progress_bar.set(0)

        # Область вывода результатов
        self.output_area = scrolledtext.ScrolledText(
            self.window,
            wrap=tk.WORD,
            height=20,
            font=("Consolas", 11)
        )
        self.output_area.pack(fill="both", expand=True, padx=20, pady=10)

        # Статус бар
        self.status_label = ctk.CTkLabel(
            self.window,
            text="Готов к анализу",
            font=("Helvetica", 12)
        )
        self.status_label.pack(pady=5)

    def update_output(self, message, tag=None):
        self.output_area.insert(tk.END, f"{datetime.now().strftime('%H:%M:%S')} - {message}\n")
        if tag:
            last_line_start = self.output_area.get("end-2c linestart", "end-1c")
            self.output_area.tag_add(tag, f"end-{len(last_line_start)}c linestart", "end-1c")
        self.output_area.see(tk.END)

    def check_ssl(self, url):
        parsed_url = urlparse(url)
        if parsed_url.scheme != "https":
            self.update_output("Сайт не использует HTTPS", "warning")
            return False
        self.update_output("HTTPS проверка пройдена", "success")
        return True

    def check_downloads(self, response):
        content_disposition = response.headers.get('Content-Disposition', '').lower()
        content_type = response.headers.get('Content-Type', '').lower()
        suspicious_types = ['application/exe', 'application/x-msdownload', 'application/x-msdos-program']

        if 'attachment' in content_disposition:
            self.update_output("Предупреждение: Сайт пытается автоматически скачать файл", "warning")
            return False

        if any(suspicious_type in content_type for suspicious_type in suspicious_types):
            self.update_output("Предупреждение: Обнаружен подозрительный тип контента", "warning")
            return False

        self.update_output("Проверка загрузок пройдена", "success")
        return True

    def analyze_site(self):
        url = self.url_entry.get()
        security_issues = []
        is_safe = True

        try:
            self.progress_bar.set(0.2)
            if not self.check_ssl(url):
                security_issues.append("Отсутствует HTTPS")
                is_safe = False
self.progress_bar.set(0.4)
            response = requests.get(url, timeout=10, allow_redirects=True)
            self.update_output("Соединение установлено успешно", "success")

            self.progress_bar.set(0.6)
            if len(response.history) > 2:
                security_issues.append("Множественные перенаправления")
                is_safe = False
                self.update_output(f"Обнаружено {len(response.history)} перенаправлений", "warning")

            if not self.check_downloads(response):
                security_issues.append("Подозрительные попытки загрузки файлов")
                is_safe = False

            self.progress_bar.set(0.8)
            headers = response.headers
            if not headers.get('X-Frame-Options'):
                security_issues.append("Отсутствует защита от кликджекинга")
                self.update_output("Отсутствует защита от кликджекинга", "warning")
            if not headers.get('X-Content-Type-Options'):
                security_issues.append("Отсутствует защита от MIME-спуфинга")
                self.update_output("Отсутствует защита от MIME-спуфинга", "warning")

            html_content = response.text.lower()
            if "<form" in html_content and "password" in html_content:
                self.update_output("На сайте обнаружена форма для ввода пароля", "warning")
                self.update_output("Убедитесь, что вы доверяете этому сайту", "warning")

            self.progress_bar.set(1.0)
            self.update_output("\nИТОГОВОЕ ЗАКЛЮЧЕНИЕ:", "header")
            if security_issues:
                self.update_output("Обнаруженные проблемы:", "warning")
                for issue in security_issues:
                    self.update_output(f"- {issue}", "warning")

            status = "безопасен" if is_safe else "может быть небезопасен"
            self.update_output(f"\nСайт {status}", "success" if is_safe else "error")

        except Exception as e:
            self.update_output(f"Ошибка: {str(e)}", "error")
        finally:
            self.analyze_button.configure(state="normal")
            self.status_label.configure(text="Анализ завершен")

    def start_analysis(self):
        self.output_area.delete(1.0, tk.END)
        self.analyze_button.configure(state="disabled")
        self.status_label.configure(text="Выполняется анализ...")
        threading.Thread(target=self.analyze_site, daemon=True).start()

    def run(self):
        # Настройка тегов для форматирования текста
        self.output_area.tag_configure("success", foreground="green")
        self.output_area.tag_configure("warning", foreground="orange")
        self.output_area.tag_configure("error", foreground="red")
        self.output_area.tag_configure("header", foreground="blue", font=("Helvetica", 12, "bold"))

        self.window.mainloop()


if name == "__main__":
    app = SecurityAnalyzerGUI()
    app.run()
